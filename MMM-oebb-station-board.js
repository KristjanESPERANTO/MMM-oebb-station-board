/** 
 * ÖBB Station Arrivals & Departures
 * Show arrivals and departures of a specific ÖBB station
 * 
 * Version 0.0.0
 * By Michael Scharl <michael.scharl@me.com>
 * 
 * License MIT
 * 
 * This is an autogenerated file. DO NOT EDIT!
 */
(function () {
  'use strict';

  var GET_STATION_DATA = 'get_station_data';
  var RECEIVED_STATION_DATA = 'received_station_data';

  /**
   * Returns a function, that, as long as it continues to be invoked, will not
   * be triggered. The function will be called after it stops being called for
   * N milliseconds. If `immediate` is passed, trigger the function on the
   * leading edge, instead of the trailing. The function also has a property 'clear' 
   * that is a function which will clear the timer to prevent previously scheduled executions. 
   *
   * @source underscore.js
   * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
   * @param {Function} function to wrap
   * @param {Number} timeout in ms (`100`)
   * @param {Boolean} whether to execute at the beginning (`false`)
   * @api public
   */
  function debounce(func, wait, immediate){
    var timeout, args, context, timestamp, result;
    if (null == wait) wait = 100;

    function later() {
      var last = Date.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    }
    var debounced = function(){
      context = this;
      args = arguments;
      timestamp = Date.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };

    debounced.clear = function() {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
    };
    
    debounced.flush = function() {
      if (timeout) {
        result = func.apply(context, args);
        context = args = null;
        
        clearTimeout(timeout);
        timeout = null;
      }
    };

    return debounced;
  }
  // Adds compatibility for ES modules
  debounce.debounce = debounce;

  var debounce_1 = debounce;

  var store = new /** @class */ (function () {
      function Store() {
          var _this = this;
          this._loading = false;
          this._callbacks = [];
          this._update = debounce_1(function () { return _this._callbacks.forEach(function (callback) { return callback(); }); }, 50);
      }
      Object.defineProperty(Store.prototype, "loading", {
          get: function () {
              return this._loading;
          },
          set: function (value) {
              this._loading = value;
              this._update();
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Store.prototype, "stationData", {
          get: function () {
              return this._stationData;
          },
          set: function (value) {
              this._stationData = value;
              this._update();
          },
          enumerable: true,
          configurable: true
      });
      Store.prototype.onUpdate = function (callback) {
          this._callbacks.push(callback);
      };
      return Store;
  }());

  var DOM_INSTANCES = {};
  Module.register('MMM-oebb-station-board', {
      /**
       * Define the default instance config
       */
      defaults: {
          boardType: 'dep',
          maxConnections: 8,
      },
      start: function () {
          var _this = this;
          store.onUpdate(function () { return _this.renderDom(); });
          this._fetchStationData();
      },
      /**
       * Core-Function to return the modules DOM-Tree.
       */
      getDom: function () {
          this.renderDom();
          return this._getDomInstance().root;
      },
      renderDom: function () {
          var _a = this._getDomInstance(), root = _a.root, header = _a.header, table = _a.table, createRow = _a.createRow;
          var data = store.stationData;
          if (store.loading) {
              header.innerText = 'Loading station data …';
          }
          else if (!data) {
              header.innerText = 'No data available!';
              table.innerHTML = '';
          }
          else {
              header.innerText = data.stationName;
              table.innerHTML = '';
              table.append.apply(table, data.journey.map(function (train) {
                  var _a = createRow(), row = _a.row, time = _a.time, timeCorrection = _a.timeCorrection, id = _a.id, destination = _a.destination, platform = _a.platform;
                  time.innerText = train.ti;
                  id.innerText = train.pr;
                  destination.innerText = train.lastStop;
                  platform.innerText = train.tr;
                  if (train.rt) {
                      timeCorrection.innerText = train.rt.dlt;
                  }
                  return row;
              }));
          }
      },
      socketNotificationReceived: function (notification, payload) {
          switch (notification) {
              case RECEIVED_STATION_DATA:
                  store.stationData = payload;
                  store.loading = false;
                  this._setupRefreshTimeout();
                  break;
          }
      },
      _getDomInstance: function () {
          var identifier = this.identifier;
          // Create DOM Elements only if not created before.
          if (!DOM_INSTANCES[identifier]) {
              var root = document.createElement('div');
              var header = document.createElement('header');
              var table = document.createElement('table');
              var createRow = function () {
                  var row = document.createElement('tr');
                  var time = document.createElement('td');
                  var timeCorrection = document.createElement('td');
                  var id = document.createElement('td');
                  var destination = document.createElement('td');
                  var platform = document.createElement('td');
                  row.append(time, timeCorrection, id, destination, platform);
                  return {
                      row: row,
                      time: time,
                      timeCorrection: timeCorrection,
                      id: id,
                      destination: destination,
                      platform: platform,
                  };
              };
              root.append(header, table);
              DOM_INSTANCES[identifier] = {
                  root: root,
                  header: header,
                  table: table,
                  createRow: createRow,
              };
          }
          return DOM_INSTANCES[identifier];
      },
      _fetchStationData: function () {
          store.loading = true;
          this.sendSocketNotification(GET_STATION_DATA, this.config);
      },
      _setupRefreshTimeout: function () {
          var _this = this;
          var timeout = 15 * 60 * 1000;
          if (store.stationData) {
              var nextJourneyDate = store.stationData.journey.reduce(function (nextTime, journey) {
                  var _a = journey.ti.split(':'), hours = _a[0], minutes = _a[1];
                  var _b = journey.da.split('.'), day = _b[0], month = _b[1], year = _b[2];
                  var date = new Date(year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":00");
                  if (!nextTime) {
                      return date;
                  }
                  else if (nextTime < date) {
                      return nextTime;
                  }
                  return date;
              }, null);
              if (nextJourneyDate) {
                  var diff = Math.abs(+nextJourneyDate - +new Date());
                  timeout = timeout < diff ? timeout : diff;
              }
          }
          setTimeout(function () {
              _this._fetchStationData();
          }, timeout);
      },
  });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTU1NLW9lYmItc3RhdGlvbi1ib2FyZC5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==
